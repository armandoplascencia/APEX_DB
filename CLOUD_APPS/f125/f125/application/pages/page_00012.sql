prompt --application/pages/page_00012
begin
--   Manifest
--     PAGE: 00012
--   Manifest End
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2021.04.15'
,p_release=>'21.1.7'
,p_default_workspace_id=>9008156634332785
,p_default_application_id=>125
,p_default_id_offset=>0
,p_default_owner=>'MISO'
);
wwv_flow_api.create_page(
 p_id=>12
,p_user_interface_id=>wwv_flow_api.id(99009173200118681)
,p_name=>'instructions'
,p_alias=>'INSTRUCTIONS'
,p_step_title=>'instructions'
,p_autocomplete_on_off=>'OFF'
,p_page_template_options=>'#DEFAULT#'
,p_last_updated_by=>'MISO'
,p_last_upd_yyyymmddhh24miss=>'20220221075449'
);
wwv_flow_api.create_page_plug(
 p_id=>wwv_flow_api.id(99972860254758402)
,p_plug_name=>'New'
,p_region_template_options=>'#DEFAULT#:t-Region--scrollBody'
,p_plug_template=>wwv_flow_api.id(98919559052118606)
,p_plug_display_sequence=>10
,p_include_in_reg_disp_sel_yn=>'Y'
,p_plug_display_point=>'BODY'
,p_plug_source=>wwv_flow_string.join(wwv_flow_t_varchar2(
'<PRE>',
'DECLARE ',
'L_RETURN_VALUE  BOOLEAN;',
'L_P_JOB_NAME    VARCHAR2(200) :=''DUMMY_JOB_EXAMPLE'';',
'BEGIN',
'    L_RETURN_VALUE := MISO.AT_SCHEDULER.EXISTS_JOB(P_JOB_NAME => L_P_JOB_NAME);',
'    if (l_return_Value)',
'    then ',
'        dbms_output.put_line(''job ''||l_p_job_name||'' exists'');',
'    else',
'        dbms_output.put_line(''job ''||l_p_job_name||'' does not exists'');',
'    end if;',
'END;',
'/',
'',
'DECLARE ',
'   L_RETURN_VALUE      BOOLEAN;',
'   L_P_JOB_NAME        VARCHAR2(200) := ''DUMMY_JOB_EXAMPLE'';',
'   L_P_JOB_ACTION      VARCHAR2(200) := ''AT_SCHEDULER.DUMMY_PROC'';  /* call a plsql block or stored procedure , etc */',
'   L_P_START_DATE      TIMESTAMP WITH TIME ZONE;                    /* 28-SEP-19 03.00.00 AM America/New_York */',
'   L_P_REPEAT_INTERVAL VARCHAR2(200) :=  ''FREQ=DAILY;INTERVAL=1'';   /* FREQ=DAILY;INTERVAL=1 */',
'   L_P_END_DATE        TIMESTAMP WITH TIME ZONE;                    /* null */',
'   L_P_ENABLED         BOOLEAN := TRUE;                             /* TRUE */ ',
'   L_P_ARGUMENT_LIST   MISO.AT_SCHEDULER.T_JOB_ACTION_ARG;   ',
'   L_P_COMMENTS        VARCHAR2(200) := ''Started by AP Dummy_job_example'';',
'BEGIN',
'    SELECT CAST (SYSDATE AS TIMESTAMP) into l_p_start_date from dual;',
'    L_RETURN_VALUE := MISO.AT_SCHEDULER.ADD_JOB(',
'        P_JOB_NAME        => L_P_JOB_NAME, ',
'        P_JOB_ACTION      => L_P_JOB_ACTION, ',
'        P_START_DATE      => L_P_START_DATE,',
'        P_REPEAT_INTERVAL => L_P_REPEAT_INTERVAL, ',
'        P_END_DATE        => L_P_END_DATE,',
'        P_ENABLED         => L_P_ENABLED, ',
'        P_ARGUMENT_LIST   => L_P_ARGUMENT_LIST, ',
'        P_COMMENTS        => L_P_COMMENTS);',
'    if (l_return_Value)',
'    then ',
'        dbms_output.put_line(''add job ''||l_p_job_name||'' successful'');',
'    else',
'        dbms_output.put_line(''add job ''||l_p_job_name||'' not successful'');',
'    end if;        ',
'END;',
'/',
'',
'DECLARE',
'   L_P_JOB_NAME VARCHAR2(200) := '''';',
'BEGIN',
'   MISO.AT_SCHEDULER.EXECUTE_JOB(',
'      P_JOB_NAME => L_P_JOB_NAME',
'   );',
'END;',
'/',
'DECLARE',
'   L_P_JOB_NAME VARCHAR2(200) := '''';',
'BEGIN',
'   MISO.AT_SCHEDULER.REMOVE_JOB(',
'      P_JOB_NAME => L_P_JOB_NAME',
'   );',
'END;',
'/',
'DECLARE',
'   L_RETURN_VALUE PL/SQL BOOLEAN;',
'   L_P_JOB_NAME VARCHAR2(200) := '''';',
'BEGIN',
'   L_RETURN_VALUE := MISO.AT_SCHEDULER.IS_ACTIEF_JOB(',
'      P_JOB_NAME => L_P_JOB_NAME',
'   );',
'END;',
'/',
'DECLARE',
'   L_P_JOB_NAME VARCHAR2(200) := '''';',
'BEGIN',
'   MISO.AT_SCHEDULER.ENABLE_JOB(',
'      P_JOB_NAME => L_P_JOB_NAME',
'   );',
'END;',
'/',
'DECLARE',
'   L_P_JOB_NAME VARCHAR2(200) := '''';',
'BEGIN',
'   MISO.AT_SCHEDULER.DISABLE_JOB(',
'      P_JOB_NAME => L_P_JOB_NAME',
'   );',
'END;',
'/',
'BEGIN',
'   MISO.AT_SCHEDULER.DUMMY_PROC();',
'END;',
'/',
'',
'create or replace package pkg_session_longops is',
'  procedure do_init (p_opname in varchar2, p_target in number, p_units in varchar2);',
'  procedure do_update (p_opname in varchar2, p_status in number);',
'end pkg_session_longops;',
'/',
'sho err',
'',
'create or replace package body pkg_session_longops is',
'  type t_array is table of number index by varchar2(255);',
'  g_arr_rindex t_array;',
'  g_arr_slno   t_array;',
'  g_arr_total  t_array;',
'',
'  procedure do_init (p_opname in varchar2, p_target in number, p_units in varchar2) is',
'    l_rindex binary_integer := dbms_application_info.set_session_longops_nohint;',
'    l_slno   binary_integer;',
'  begin',
'    dbms_application_info.set_session_longops(',
'      rindex       => l_rindex,',
'      slno         => l_slno,',
'      op_name      => p_opname,',
'      target       => 0,',
'      context      => 0,',
'      sofar        => 0,',
'      totalwork    => p_target,',
'      target_desc  => ''no target'',',
'      units        => p_units',
'    );',
'    g_arr_rindex(p_opname) := l_rindex;',
'    g_arr_slno(p_opname) := l_slno;',
'    g_arr_total(p_opname) := p_target;',
'  end do_init;',
'      ',
'  procedure do_update (p_opname in varchar2, p_status in number) is',
'    l_rindex binary_integer := g_arr_rindex(p_opname);',
'    l_slno   binary_integer := g_arr_slno(p_opname);',
'  begin',
'    dbms_application_info.set_session_longops(',
'      rindex       => l_rindex,',
'      slno         => l_slno,',
'      op_name      => p_opname,',
'      target       => 0,',
'      context      => 0,',
'      sofar        => p_status,',
'      totalwork    => g_arr_total(p_opname),',
'      target_desc  => ''no target'',',
'      units        => null',
'    );',
'    g_arr_rindex(p_opname) := l_rindex;',
'    g_arr_slno(p_opname) := l_slno;',
'  end do_update;',
'end pkg_session_longops;',
'/',
'sho err',
'',
'</PRE>'))
,p_plug_query_options=>'DERIVED_REPORT_COLUMNS'
,p_attribute_01=>'N'
,p_attribute_02=>'HTML'
);
wwv_flow_api.create_page_plug(
 p_id=>wwv_flow_api.id(99972954642758403)
,p_plug_name=>'New'
,p_region_template_options=>'#DEFAULT#:t-Region--scrollBody'
,p_plug_template=>wwv_flow_api.id(98919559052118606)
,p_plug_display_sequence=>20
,p_include_in_reg_disp_sel_yn=>'Y'
,p_plug_display_point=>'BODY'
,p_plug_source=>wwv_flow_string.join(wwv_flow_t_varchar2(
'<PRE>',
'--------------------------------------------------------',
'--  File created - Sunday-November-15-2015   ',
'--------------------------------------------------------',
'--------------------------------------------------------',
'--  DDL for Package AT_SCHEDULER',
'--------------------------------------------------------',
'',
'  CREATE OR REPLACE PACKAGE MISO."AT_SCHEDULER" as',
' ',
'type t_job_action_arg is record(',
'    argument_name varchar2(100),',
'    argument_type varchar2(100),',
'    default_value varchar2(100),',
'    current_value varchar2(4000)',
');',
' ',
'/** ',
' * Check if job exists ',
' * @param p_job_name name of the scheduler job',
' */',
'function exists_job (p_job_name in user_scheduler_jobs.job_name%type) ',
'return boolean;',
' ',
' ',
'/**',
' * add / save job to scheduler jobs',
' * @param p_job_name name of the scheduler job',
' * @param p_job_name action of the scheduler job',
' */ ',
'function add_job (p_job_name in user_scheduler_jobs.job_name%type',
'                  , p_job_action in user_scheduler_jobs.job_action%type',
'                  , p_start_date in user_scheduler_jobs.start_date%type',
'                  , p_repeat_interval in user_scheduler_jobs.repeat_interval%type',
'                  , p_end_date in user_scheduler_jobs.end_date%type',
'                  , p_enabled in boolean := false',
'                  , p_argument_list in t_job_action_arg := null',
'                  , p_comments in user_scheduler_jobs.comments%type',
'                  ) ',
'return boolean;',
' ',
'/**',
' * To force immediate job execution ',
' * @param p_job_name name of the scheduler job',
' */ ',
'procedure execute_job (p_job_name in user_scheduler_jobs.job_name%type);',
' ',
'/**',
' * Remove job from scheduler by name ',
' * @param p_job_name name of the scheduler job',
' */ ',
'procedure remove_job (p_job_name in user_scheduler_jobs.job_name%type) ;',
' ',
'/**',
' * Indicates whether the job is enabled (TRUE) or not (FALSE)',
' * @param p_job_name name of the scheduler job',
' */ ',
'function is_actief_job (p_job_name in user_scheduler_jobs.job_name%type) ',
'return boolean;',
' ',
'/**',
' * Enable job from scheduler by name ',
' * @param p_job_name name of the scheduler job',
' */ ',
'procedure enable_job (p_job_name in user_scheduler_jobs.job_name%type);',
' ',
'/**',
' * Disable job from scheduler by name ',
' * @param p_job_name name of the scheduler job',
' */ ',
'procedure disable_job (p_job_name in user_scheduler_jobs.job_name%type);',
' ',
' /**',
' * Dummy procedure for testing ',
' */ ',
'procedure dummy_proc;',
' ',
'end;',
'',
'/',
'--------------------------------------------------------',
'--  DDL for Package Body AT_SCHEDULER',
'--------------------------------------------------------',
'',
'  CREATE OR REPLACE PACKAGE BODY miso."AT_SCHEDULER" as',
' ',
'/** ',
' * Check if job exists ',
' * @param p_job_name name of the scheduler job',
' */',
'function exists_job (p_job_name in user_scheduler_jobs.job_name%type) ',
'return boolean is ',
'    l_found integer;',
'begin',
'    select decode(count(1), 0, 0, 1) into l_found ',
'    from   user_scheduler_jobs',
'    where  (job_name = p_job_name);',
'    return (l_found = 1);',
'end exists_job;',
' ',
'/**',
' * add to scheduler jobs',
' * @param p_job_name name of the scheduler job',
' * @param p_job_name action of the scheduler job',
' */ ',
'function add_job (p_job_name in user_scheduler_jobs.job_name%type',
'                  , p_job_action in user_scheduler_jobs.job_action%type',
'                  , p_start_date in user_scheduler_jobs.start_date%type',
'                  , p_repeat_interval in user_scheduler_jobs.repeat_interval%type',
'                  , p_end_date in user_scheduler_jobs.end_date%type',
'                  , p_enabled in boolean := false',
'                  , p_argument_list in t_job_action_arg := null',
'                  , p_comments in user_scheduler_jobs.comments%type',
'                  ) ',
'return boolean is',
'begin',
'    if p_job_name is not null then',
'        -- remove existing job by name',
'        -- remove_job(p_job_name);',
'        if exists_job(p_job_name) then ',
'           raise_application_error (-20000, ''Job already exists'');',
'        else  ',
'           dbms_scheduler.create_job (job_name                => p_job_name,',
'                                      job_type             => ''STORED_PROCEDURE'',',
'                                      job_action           => p_job_action,',
'                                      start_date           => p_start_date,',
'                                      repeat_interval      => p_repeat_interval, ',
'                                      end_date             => p_end_date,',
'                                      enabled              => p_enabled,',
'                                      auto_drop            => false,',
'                                      comments             => p_comments);',
' ',
'           dbms_scheduler.set_attribute (name => p_job_name, attribute => ''logging_level'', value => dbms_scheduler.logging_full);',
'        end if;',
'    end if;',
'    return true;',
'end add_job;',
' ',
'/**',
' * To force immediate job execution ',
' * @param p_job_name name of the scheduler job',
' */ ',
'procedure execute_job (p_job_name in user_scheduler_jobs.job_name%type) is',
'begin',
'    if exists_job(p_job_name) then',
'        dbms_scheduler.run_job(p_job_name);',
'    end if;',
'end execute_job;',
' ',
'/**',
' * Remove job from scheduler by name ',
' * @param p_job_name name of the scheduler job',
' */ ',
'procedure remove_job (p_job_name in user_scheduler_jobs.job_name%type) is',
'begin',
'    if exists_job(p_job_name) then',
'        dbms_scheduler.drop_job(p_job_name, true);',
'    end if;',
'end remove_job;',
' ',
'/**',
' * Indicates whether the job is enabled (TRUE) or not (FALSE)',
' * @param p_job_name name of the scheduler job',
' */ ',
'function is_actief_job (p_job_name in user_scheduler_jobs.job_name%type) ',
'return boolean is ',
'    l_found integer;',
'begin',
'    select decode(count(1), 0, 0, 1) into l_found ',
'    from   user_scheduler_jobs job',
'    where  (job.job_name = p_job_name)',
'    and    job.enabled = ''TRUE'';',
'    return (l_found = 1);',
'end is_actief_job;',
' ',
'/**',
' * Enable job from scheduler by name ',
' * @param p_job_name name of the scheduler job',
' */ ',
'procedure enable_job (p_job_name in user_scheduler_jobs.job_name%type) is',
'begin',
'    if exists_job(p_job_name) then',
'        dbms_scheduler.enable (p_job_name);',
'    end if;',
'end enable_job;',
' ',
' /**',
' * Disable job from scheduler by name ',
' * @param p_job_name name of the scheduler job',
' */ ',
'procedure disable_job (p_job_name in user_scheduler_jobs.job_name%type) as',
'begin',
'    if exists_job(p_job_name) then',
'        dbms_scheduler.disable (p_job_name);',
'    end if;',
'end disable_job;',
' ',
' /**',
' * Dummy procedure for testing ',
' */ ',
'procedure dummy_proc as',
'begin',
'     --dbms_lock.sleep(60);   ',
'     null;',
'end dummy_proc ;',
' ',
'end;',
'',
'/',
'</PRE>'))
,p_plug_query_options=>'DERIVED_REPORT_COLUMNS'
,p_attribute_01=>'N'
,p_attribute_02=>'HTML'
);
wwv_flow_api.component_end;
end;
/
