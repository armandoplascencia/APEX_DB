prompt --application/deployment/install/install_eba_proj_dates_package_body
begin
--   Manifest
--     INSTALL: INSTALL-eba_proj_dates package body
--   Manifest End
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2021.04.15'
,p_release=>'21.1.7'
,p_default_workspace_id=>9008156634332785
,p_default_application_id=>134
,p_default_id_offset=>172493832712964115
,p_default_owner=>'MISO'
);
wwv_flow_api.create_install_script(
 p_id=>wwv_flow_api.id(13562732835342979397)
,p_install_id=>wwv_flow_api.id(9012014618759672631)
,p_name=>'eba_proj_dates package body'
,p_sequence=>510
,p_script_type=>'INSTALL'
,p_script_option=>'PACKAGE_BODY'
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'CREATE OR REPLACE PACKAGE BODY "EBA_PROJ_DATES" as ',
'    function get_next_workday( p_date in timestamp ) return timestamp is ',
'        l_days varchar2(32) := '':''||eba_proj_fw.get_preference_value( ''WORKDAYS'' )||'':''; ',
'    begin ',
'        for c in 0..6 loop ',
'            if l_days like ''%:''||to_char(p_date + c,''D'')||'':%'' then ',
'                return p_date + c; ',
'            end if; ',
'        end loop; ',
'        return p_date; ',
'    end get_next_workday; ',
'',
'    function get_prev_workday( p_date in timestamp ) return timestamp is ',
'        l_days varchar2(32) := '':''||eba_proj_fw.get_preference_value( ''WORKDAYS'' )||'':''; ',
'    begin ',
'        for c in 0..6 loop ',
'            if l_days like ''%:''||to_char(p_date - c,''D'')||'':%'' then ',
'                return p_date - c; ',
'            end if; ',
'        end loop; ',
'        return p_date; ',
'    end get_prev_workday;',
'',
'    function add_workdays( p_date in timestamp, p_days in number ) return timestamp is ',
'        l_days   varchar2(32) := '':''||eba_proj_fw.get_preference_value( ''WORKDAYS'' )||'':''; ',
'        l_retval timestamp with local time zone; ',
'    begin ',
'        if p_days = 0 then ',
'            l_retval := p_date; ',
'        elsif p_days > 0 then',
'            for c1 in ( select p_date + max(l) d',
'                        from ( select level l from dual connect by level < p_days * 7 + 2 )',
'                        where rownum <= p_days',
'                            and l_days like ''%:''||to_char(p_date+l,''D'')||'':%'' ) loop',
'                l_retval := c1.d;',
'            end loop;',
'        else',
'            for c1 in ( select p_date - max(l) d ',
'                        from ( select level l from dual connect by level < abs( p_days ) * 7 + 2 ) ',
'                        where rownum <= abs( p_days )',
'                            and l_days like ''%:''||to_char(p_date - l,''D'')||'':%'' ) loop ',
'                l_retval := c1.d; ',
'            end loop; ',
'        end if;',
'',
'        return l_retval;',
'    end add_workdays; ',
'',
'    function days_between( p_start in timestamp, p_end in timestamp ) return number is',
'        l_days varchar2(32) := '':''||eba_proj_fw.get_preference_value( ''WORKDAYS'' )||'':'';',
'        l_start date := trunc( p_start );',
'        l_end   date := trunc( get_next_workday( p_end ) );',
'        l_count number := l_end - l_start;',
'    begin',
'        if p_start is null or p_end is null then',
'            raise_application_error(-20100,''Null value passed to days_between; ensure all milestones and action items have valid dates'');',
'        elsif trunc( p_start ) > trunc( p_end ) then',
'            return -1 * days_between( p_end, p_start );',
'        elsif trunc( p_start ) = trunc( p_end ) then',
'            return 0;',
'        else',
'            for c1 in ( with dys as (   select l_start + level d,',
'                                            rownum r',
'                                        from dual',
'                                        where l_days like ''%:''||to_char(l_start + level,''D'')||'':%''',
'                                        connect by level <= l_count',
'                        )',
'                        select dys.r',
'                        from dys',
'                        where dys.d = l_end',
'                    ) loop',
'                return c1.r;',
'            end loop;',
'        end if;',
'    end days_between;',
'    ',
'    function get_start_year ',
'    return number ',
'    is ',
'        l_ai_cnt    number; ',
'        l_ms_cnt    number; ',
'        l_min_ai_yr number; ',
'        l_min_ms_yr number; ',
'        l_min_yr    number; ',
'    begin ',
'        -- Get Action Item and Milestone Counts ',
'        select count(*) into l_ai_cnt from eba_proj_status_ais where original_due_date is not null; ',
'        select count(*) into l_ms_cnt from eba_proj_status_ms where original_due_date is not null; ',
' ',
'        -- Get Lowest AI Year ',
'        if l_ai_cnt > 0 then ',
'            select to_char(min(original_due_date),''YYYY'') into l_min_ai_yr from eba_proj_status_ais where original_due_date is not null; ',
'        end if; ',
' ',
'        -- Get Lowest MS Year ',
'        if l_ms_cnt > 0 then ',
'            select to_char(min(original_due_date),''YYYY'') into l_min_ms_yr from eba_proj_status_ms where original_due_date is not null; ',
'        end if; ',
' ',
'        -- Set the Minimum Year ',
'        if l_min_ai_yr is not null and l_min_ms_yr is not null then ',
'            if l_min_ai_yr > l_min_ms_yr then ',
'                l_min_yr := l_min_ms_yr; ',
'            else ',
'                l_min_yr := l_min_ai_yr; ',
'            end if; ',
'        elsif l_min_ai_yr is not null and l_min_ms_yr is null then ',
'            l_min_yr := l_min_ai_yr; ',
'        elsif l_min_ai_yr is null and l_min_ms_yr is not null then ',
'            l_min_yr := l_min_ms_yr; ',
'        elsif l_min_ai_yr is null and l_min_ms_yr is null then ',
'            select to_char(sysdate,''YYYY'') - 1 into l_min_yr from dual; ',
'        end if; ',
' ',
'        return l_min_yr; ',
'    end get_start_year; ',
' ',
'    procedure gen_quarters ',
'    ( ',
'        p_start_month in varchar2 default ''01'', ',
'        p_timezone    in varchar2, ',
'        p_num_years   in number, ',
'        p_year_fmt    in varchar2, ',
'        p_delimiter   in varchar2 ',
'    ) ',
'    is ',
'        l_start_yr  number      := eba_proj_dates.get_start_year(); ',
'        l_end_yr    number      := l_start_yr + 30; ',
'        l_curr_yr   number      := l_start_yr; ',
'        l_start     timestamp with local time zone; ',
'        l_qtr       number      := 0; ',
'        l_qtr_name  varchar2(20); ',
'        l_cb_lvl    number; ',
'    begin ',
'        delete from eba_proj_fy_periods; ',
'        l_cb_lvl := p_num_years * 4; ',
'        l_start := to_timestamp_tz(p_start_month || ''-01-'' || l_start_yr || '' 00:00 '' || p_timezone, ''MM-DD-YYYY HH24:MI TZR''); ',
'        for c1 in ',
'        ( ',
'            select add_months(l_start, (level - 1)*3) quarter_start, ',
'                   last_day(add_months(l_start, (level -1)*3 + 2)) quarter_end ',
'              from dual ',
'           connect by level <= l_cb_lvl ',
'        ) ',
'        loop ',
'            l_qtr := l_qtr + 1; ',
'            if l_qtr > 4 then ',
'                l_curr_yr := l_curr_yr + 1; ',
'                l_qtr := 1; ',
'            end if; ',
'            if p_year_fmt = ''YY'' then ',
'                l_curr_yr := substr(l_curr_yr, -2); ',
'            end if; ',
'            l_qtr_name := ''Q'' || l_qtr || p_delimiter || (l_curr_yr + 1); ',
'            insert into eba_proj_fy_periods (period_name, first_day, last_day, fiscal_year) values (l_qtr_name, c1.quarter_start, c1.quarter_end, substr(l_curr_yr, -2)); ',
'        end loop; ',
'    end gen_quarters; ',
' ',
'end eba_proj_dates; ',
'/',
'',
''))
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(13562732982675979400)
,p_script_id=>wwv_flow_api.id(13562732835342979397)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'EBA_PROJ_DATES'
,p_last_updated_on=>to_date('20160201202422','YYYYMMDDHH24MISS')
,p_created_by=>'DAVID'
,p_created_on=>to_date('20160201202422','YYYYMMDDHH24MISS')
);
wwv_flow_api.component_end;
end;
/
