prompt --application/deployment/install/install_api_package_ingest
begin
--   Manifest
--     INSTALL: INSTALL-api package ingest
--   Manifest End
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2021.04.15'
,p_release=>'21.1.7'
,p_default_workspace_id=>9008156634332785
,p_default_application_id=>134
,p_default_id_offset=>172493832712964115
,p_default_owner=>'MISO'
);
wwv_flow_api.create_install_script(
 p_id=>wwv_flow_api.id(9022519035975794191)
,p_install_id=>wwv_flow_api.id(9012014618759672631)
,p_name=>'api package ingest'
,p_sequence=>470
,p_script_type=>'INSTALL'
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'CREATE OR REPLACE PACKAGE "EBA_PROJ_STATUS_API" as',
'procedure post_email_response (',
'   p_to                 in varchar2 default null,',
'   p_from               in varchar2 default null,',
'   p_cc                 in varchar2 default null,',
'   p_subject            in varchar2 default null,',
'   p_body               in CLOB);',
'procedure contribute_update (',
'   p_project_id         in number   default null,',
'   p_project_key        in varchar2 default null,',
'   p_project_name       in varchar2 default null,',
'   p_user_email         in varchar2 default ''unknown'',',
'   p_update_type        in varchar2 default ''Status'',',
'   p_update_text        in CLOB,',
'   p_request_id         in varchar2 default null,',
'   p_ingest_id          in number default null,',
'   p_message            out varchar2);',
'function get_milestone_name (',
'   p_id                 in number) return varchar2;',
'   g_new_update_id      number;',
'end eba_proj_status_api;',
'/',
'',
'',
'CREATE OR REPLACE PACKAGE BODY "EBA_PROJ_STATUS_API" as',
'procedure contribute_update (',
'   p_project_id         in number   default null,',
'   p_project_key        in varchar2 default null,',
'   p_project_name       in varchar2 default null,',
'   p_user_email         in varchar2 default ''unknown'',',
'   p_update_type        in varchar2 default ''Status'',',
'   p_update_text        in CLOB,',
'   p_request_id         in varchar2 default null,',
'   p_ingest_id          in number default null,',
'   p_message            out varchar2) ',
'is ',
'    c      pls_integer := 0;',
'    l_id   number;',
'    l_update_type_id number;',
'begin',
'    update EBA_PROJ_STATUS_INGEST_LOG set row_key = p_project_key, component_id = p_project_id, log_info = ''project name=''||p_project_name where id = p_ingest_id;',
'    commit;',
'    if p_user_email is null then',
'       update EBA_PROJ_STATUS_INGEST_LOG set log_info = ''Email not provided'' where id = p_ingest_id;',
'       commit;',
'       raise_application_error(-20001,''Email not provided'');',
'    end if;',
'    if instr(p_user_email,''@'') = 0 then',
'       update EBA_PROJ_STATUS_INGEST_LOG set log_info = ''Invalid email, missing @ sign.'' where id = p_ingest_id;',
'       commit;',
'       raise_application_error(-20001,''Invalid email, missing @ sign.'');',
'    end if;',
'    if instr(p_user_email,''.'') = 0 then',
'       update EBA_PROJ_STATUS_INGEST_LOG set log_info = ''Invalid email, missing dot.'' where id = p_ingest_id;',
'       commit;',
'       raise_application_error(-20001,''Invalid email, missing dot.'');',
'    end if;',
'    if p_update_text is null then',
'       update EBA_PROJ_STATUS_INGEST_LOG set log_info = ''Update text must not be null.'' where id = p_ingest_id;',
'       commit;',
'       raise_application_error(-20001,''Update text must not be null.'');',
'    end if;',
'    select id into l_update_type_id',
'    from eba_proj_status_update_types t',
'    where to_char(t.id) = p_update_type',
'        or upper(t.status_update_type) = upper(p_update_type);',
'    if l_update_type_id is null then',
'       update EBA_PROJ_STATUS_INGEST_LOG set log_info = ''Invalid update type: ''||p_update_type||''.'' where id = p_ingest_id;',
'       commit;',
'       raise_application_error(-20001,''Invalid update type: ''||p_update_type||''.'');',
'    end if;',
'    if p_project_name is not null then',
'       begin ',
'       select count(*) c, max(id) into c, l_id from eba_proj_status where upper(project) like ''%''||upper(trim(p_project_name))||''%'';',
'       exception when others then',
'       c := 0;',
'       end;',
'       if c = 1 then',
'            for c1 in (select id, row_key, project from eba_proj_status where id = l_id) loop',
'               c := c + 1;',
'               insert into eba_proj_status_updates ',
'                   (project_id, status_update, update_owner, update_type, UPDATE_DATE, INCLUDE_ON_STATUS_RPT)',
'                   values',
'                   (c1.id, p_update_text, p_user_email, l_update_type_id, current_date,''Y'')',
'                   returning id into g_new_update_id;',
'               update eba_proj_status set updated = current_date where id = c1.id;',
'               commit;',
'               p_message := ''Project ''||c1.row_key||'': ''||c1.project||'' updated.'';',
'               exit;',
'            end loop;',
'       else',
'           raise_application_error(-20001,''No corresponding project found for project name="''||trim(upper(p_project_name))||''"'');',
'       end if;',
'    elsif p_project_id is null and p_project_key is not null then',
'        for c1 in (select id, row_key, project from eba_proj_status where row_key = trim(upper(p_project_key))) loop',
'           c := c + 1;',
'           insert into eba_proj_status_updates ',
'               (project_id, status_update, update_owner, update_type, UPDATE_DATE, INCLUDE_ON_STATUS_RPT)',
'               values',
'               (c1.id, p_update_text, p_user_email, l_update_type_id, current_date, ''Y'')',
'               returning id into g_new_update_id;',
'           update eba_proj_status set updated = current_date where id = c1.id;',
'           commit;',
'           p_message := ''Project ''||c1.row_key||'': ''||c1.project||'' updated.'';',
'           exit;',
'        end loop;',
'    elsif p_project_id is not null then',
'        update EBA_PROJ_STATUS_INGEST_LOG set log_info = ''insert status by for p_update_type = ''||p_update_type where id = p_ingest_id;',
'        commit;',
'        for c1 in (select id, row_key, project from eba_proj_status where id = p_project_id) loop',
'           c := c + 1;',
'           insert into eba_proj_status_updates ',
'               (project_id, status_update, update_owner, update_type, UPDATE_DATE, INCLUDE_ON_STATUS_RPT)',
'               values',
'               (c1.id, p_update_text, p_user_email, l_update_type_id, current_date, ''Y'')',
'               returning id into g_new_update_id;',
'           update eba_proj_status set updated = current_date where id = c1.id;',
'           commit;',
'           p_message := ''Project ''||c1.row_key||'': ''||c1.project||'' updated.'';',
'           exit;',
'        end loop;',
'    end if;',
'    if p_message is null then',
'        p_message := ''unexpected error'';',
'    end if;',
'    if c = 0 then',
'       raise_application_error(-20001,''No corresponding project found for project key="''||trim(upper(p_project_key))||''"'');',
'    end if;',
'end contribute_update;',
'procedure post_email_response (',
'   p_to                  in varchar2 default null,',
'   p_from                in varchar2 default null,',
'   p_cc                  in varchar2 default null,',
'   p_subject             in varchar2 default null,',
'   p_body                in CLOB)',
'is',
'   i             pls_integer := 0;',
'   x             varchar2(4000) := null;',
'   l_row_key     varchar2(30) := null;',
'   l_id          number := null;',
'   l_update_type varchar2(30);',
'   l_from        varchar2(255);',
'   c             pls_integer;',
'   w1            varchar2(4000);',
'   l_message     varchar2(4000);',
'   l_ingest_id   number;',
'begin',
'   -- subject:',
'   --     P-Track: AAOB Status',
'   --     P-Track: AAOB Accomplishment',
'   --     P-Track: AAOB Question',
'   ',
'   insert into eba_proj_status_ingest_log ',
'       (p_to, p_from, p_cc, p_subject, p_body)',
'       values',
'       (substr(p_to,1,4000), substr(p_from,1,4000), substr(p_cc,1,4000), substr(p_subject,1,4000), dbms_lob.substr(p_body,4000,1))',
'       returning id into l_ingest_id;',
'   ',
'   --------------------------------',
'   -- First look for formal syntax',
'   -- remove any leading junk',
'  x := trim(substr(p_subject,instr(upper(p_subject),''P-TRACK:'')+8));',
'  l_update_type := trim(substr(x,instr(x,'' '')));',
'  l_update_type := trim(substr(l_update_type,0,instr(l_update_type,'' '')));',
'  l_row_key := trim(substr(x,0,instr(x,'' '')));',
'  if l_row_key is not null then',
'       for c1 in (select id from eba_proj_status where row_key = l_row_key) loop',
'           l_id := c1.id;',
'       end loop;',
'   end if;',
'   if l_id is null then',
'       x := p_subject;',
'       -- attempt to find project name given full subject',
'       c := 0;',
'       for c1 in (select id from eba_proj_status where upper(project) like ''%''||upper(p_subject)||''%'') loop',
'           l_id := c1.id;',
'           c := c + 1;',
'       end loop;',
'    ',
'       if c = 0 or c > 1 then',
'          c := 0;',
'          x := replace(replace(trim(p_subject),''_'','' ''),''"'','' '');',
'          i := instr(x,'' '');',
'          if i > 1 then',
'             x := substr(x,1,i-1);',
'          end if;',
'          if length(x) > 0 then',
'          w1 := x;',
'          -- check if first word is project key',
'          for c1 in (select id from eba_proj_status where row_key = x) loop',
'               l_id := c1.id;',
'               c := c + 1;',
'          end loop;    ',
'          end if;',
'       end if;',
'       if c = 0 or c > 1 then',
'          c := 0;',
'          x := replace(replace(trim(p_subject),''_'','' ''),''"'','' '');',
'          i := instr(x,'' '');',
'          if i > 1 then',
'              x := substr(x,i + 1);',
'              x := trim(x);',
'              i := instr(x,'' '');',
'              x := instr(x,1, i-1 );',
'              -- check if second word is project key',
'              if length(x) > 0 then',
'                  for c1 in (select id from eba_proj_status where row_key = x) loop',
'                       l_id := c1.id;',
'                       c := c + 1;',
'                  end loop;',
'              end if;',
'          end if;',
'       end if;',
'    ',
'       if c = 0 or c > 1 then',
'          c := 0;',
'          -- attempt to find a word match in project name',
'          for c1 in (select id from eba_proj_status where '' ''||upper(project)||'' '' like ''% ''||upper(p_subject)||'' %'') loop',
'               l_id := c1.id;',
'               c := c + 1;',
'          end loop;    ',
'       end if;',
'       if c != 1 then',
'           raise_application_error(-20001,''Unable to locate a p-track project like ''||apex_escape.html(p_subject));',
'       end if;',
'   end if;',
'   -- NOTE: Since status update types are dynamic, this code is likely to be wrong.',
'   if instr(upper(x),''STATUS'') > 0 then',
'      l_update_type := ''Status'';',
'   elsif instr(upper(x),''ACCOMPLISHMENT'') > 0 then',
'      l_update_type := ''Accomplishment'';',
'   elsif instr(upper(x),''QUESTION'') > 0 then',
'      l_update_type := ''Question'';',
'   else',
'      l_update_type := ''Status'';',
'   end if;',
'   if instr(p_from,'','') > 0 then',
'      l_from := substr(p_from,1,instr(p_from,'','')-1);',
'   else',
'      l_from := trim(p_from);',
'   end if;',
'   ',
'   if instr(l_from,''>'') > 0 and instr(l_from,''<'') > 0 and instr(l_from,''@'') > 0 then',
'       l_from := substr(l_from,instr(l_from,''<'') + 1);',
'       l_from := substr(l_from,1,instr(l_from,''>'')-1);',
'   end if;',
'  ',
'   if l_id is not null and',
'      l_from is not null and',
'      l_row_key is not null and',
'      p_body is not null and',
'      l_update_type is not null then',
'        contribute_update (',
'           p_project_id  => l_id,',
'           p_project_key => l_row_Key,',
'           p_user_email  => l_from,',
'           p_update_type => l_update_type,',
'           p_update_text => p_body,',
'           p_request_id  => null,',
'           p_ingest_id => l_ingest_id,',
'           p_message => l_message);',
'        commit;',
'    else',
'        -- something is wrong',
'        raise_application_error(-20001,''Unable to locate project ID with key "''||apex_escape.html(l_row_key)||''"'');',
'    end if;',
'end post_email_response;',
'function get_milestone_name',
'(',
'  p_id in     number',
') return varchar2 ',
'is',
'  l_retval varchar2(500) := null;',
'begin',
'  for c1 in ',
'  (',
'    select',
'      milestone_name ',
'    from',
'      EBA_PROJ_STATUS_MS ',
'    where',
'      project_id = p_id',
'    and',
'      milestone_status = ''Open''',
'    order by',
'      milestone_date desc',
'  )',
'  loop',
'    l_retval := c1.milestone_name;',
'    exit;',
'  end loop;',
'  return l_retval;',
'end get_milestone_name;',
'end eba_proj_status_api;',
'/',
'',
''))
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(6964823073006123794)
,p_script_id=>wwv_flow_api.id(9022519035975794191)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'EBA_PROJ_STATUS_API'
,p_last_updated_on=>to_date('20141219062054','YYYYMMDDHH24MISS')
,p_created_on=>to_date('20141219062054','YYYYMMDDHH24MISS')
);
wwv_flow_api.component_end;
end;
/
